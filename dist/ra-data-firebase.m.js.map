{"version":3,"file":"ra-data-firebase.m.js","sources":["../src/methods.js","../src/data-provider.js"],"sourcesContent":["import firebase from 'firebase'\nimport sortBy from 'sort-by'\n\nimport {\n  CREATE\n} from 'react-admin'\n\nconst getImageSize = (file) => {\n  return new Promise(resolve => {\n    const img = document.createElement('img')\n    img.onload = function () {\n      resolve({\n        width: this.width,\n        height: this.height\n      })\n    }\n    img.src = file.src\n  })\n}\n\nconst upload = async (fieldName, submitedData, id, resourceName, resourcePath) => {\n  let file = submitedData[fieldName] && Array.isArray(submitedData[fieldName]) ? submitedData[fieldName][0] : submitedData[fieldName]\n  const result = {}\n  if (file && file.rawFile && file.rawFile.name) {\n    const rawFile = file.rawFile\n    const ref = firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`)\n    const snapshot = await ref.put(rawFile)\n    result[fieldName] = [{}]\n    result[fieldName][0].uploadedAt = Date.now()\n    result[fieldName][0].src = snapshot.downloadURL.split('?').shift() + '?alt=media'\n    result[fieldName][0].type = rawFile.type\n    if (rawFile.type.indexOf('image/') === 0) {\n      try {\n        const imageSize = await getImageSize(file)\n        result[fieldName][0].width = imageSize.width\n        result[fieldName][0].height = imageSize.height\n      } catch (e) {\n        console.error(`Failed to get image dimensions`)\n      }\n    }\n    return result\n  }\n  return false\n}\n\nconst save = async (id, data, previous, resourceName, resourcePath, firebaseSaveFilter, uploadResults, isNew, metaFieldNames) => {\n  const currentUser = firebase.auth().currentUser\n\n  if (uploadResults) {\n    uploadResults.map(uploadResult => uploadResult ? Object.assign(data, uploadResult) : false)\n  }\n\n  if (isNew) {\n    Object.assign(data, { [metaFieldNames.createdAt]: Date.now() })\n  }\n\n  if (currentUser) {\n    Object.assign(data, { [metaFieldNames.createdBy]: currentUser.uid })\n  }\n\n  data = Object.assign(previous, { [metaFieldNames.updatedAt]: Date.now() }, data)\n\n  if (!data.key) {\n    data.key = id\n  }\n  if (!data.id) {\n    data.id = id\n  }\n\n  await firebase.database().ref(`${resourcePath}/${data.key}`).update(firebaseSaveFilter(data))\n  return { data }\n}\n\nconst del = async (id, resourceName, resourcePath, uploadFields) => {\n  if (uploadFields.length) {\n    uploadFields.map(fieldName =>\n      firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`).delete())\n  }\n\n  await firebase.database().ref(`${resourcePath}/${id}`).remove()\n  return { data: id }\n}\n\nconst getItemID = (params, type, resourceName, resourcePath, resourceData) => {\n  let itemId = params.data.id || params.id || params.data.key || params.key\n  if (!itemId) {\n    itemId = firebase.database().ref().child(resourcePath).push().key\n  }\n\n  if (!itemId) {\n    throw new Error('ID is required')\n  }\n\n  if (resourceData && resourceData[itemId] && type === CREATE) {\n    throw new Error('ID already in use')\n  }\n\n  return itemId\n}\n\nconst getOne = (params, resourceName, resourceData) => {\n  if (params.id && resourceData[params.id]) {\n    return { data: resourceData[params.id] }\n  } else {\n    throw new Error('Key not found')\n  }\n}\n\nconst getMany = (params, resourceName, resourceData) => {\n  let ids = []\n  let data = []\n  let total = 0\n\n  if (params.ids && Array.isArray(params.ids)) {\n    /** GET_MANY */\n    params.ids.forEach(key => {\n      if (resourceData[key]) {\n        ids.push(key)\n        data.push(resourceData[key])\n        total++\n      }\n    })\n\n    return {total, ids, data}\n  } else if (params.pagination) {\n    /** GET_LIST / GET_MANY_REFERENCE */\n    let values = []\n\n    // Copy the filter params so we can modify for GET_MANY_REFERENCE support.\n    const filter = Object.assign({}, params.filter)\n\n    if (params.target && params.id) {\n      filter[params.target] = params.id\n    }\n\n    const filterKeys = Object.keys(filter)\n    /* TODO Must have a better way */\n    if (filterKeys.length) {\n      Object.values(resourceData).map(value => {\n        let filterIndex = 0\n        while (filterIndex < filterKeys.length) {\n          let property = filterKeys[filterIndex]\n          if (property !== 'q' && value[property] !== filter[property]) {\n            return filterIndex\n          } else if (property === 'q') {\n            if (JSON.stringify(value).indexOf(filter['q']) === -1) {\n              return filterIndex\n            }\n          }\n          filterIndex++\n        }\n        values.push(value)\n        return filterIndex\n      })\n    } else {\n      values = Object.values(resourceData)\n    }\n\n    if (params.sort) {\n      values.sort(sortBy(`${params.sort.order === 'ASC' ? '-' : ''}${params.sort.field}`))\n    }\n\n    const keys = values.map(i => i.id)\n    const { page, perPage } = params.pagination\n    const _start = (page - 1) * perPage\n    const _end = page * perPage\n    data = values.slice(_start, _end)\n    ids = keys.slice(_start, _end)\n    total = values.length\n    return { data, ids, total }\n  } else {\n    throw new Error('Error processing request')\n  }\n}\n\nexport default {\n  upload,\n  save,\n  del,\n  getItemID,\n  getOne,\n  getMany\n}\n","import firebase from 'firebase'\nimport methods from './methods'\nimport deepAssign from 'deep-assign'\n\nimport {\n  GET_LIST,\n  GET_ONE,\n  GET_MANY,\n  GET_MANY_REFERENCE,\n  CREATE,\n  UPDATE,\n  DELETE\n} from 'react-admin'\n\nconst baseConfig = {\n  initialQuerytimeout: 10000,\n  metaFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n    createdBy: 'createdBy'\n  },\n  admin: {\n    path: 'users',\n    config: {},\n    validate: () => true\n  },\n  debug: false,\n  trackedResources: [],\n  firebaseSaveFilter: (data) => data,\n  firebaseGetFilter: (data) => data\n}\n\nexport default (options = {}) => {\n  options = deepAssign({}, baseConfig, methods, options)\n  const { metaFieldNames, trackedResources, initialQuerytimeout, debug, admin, firebaseSaveFilter, firebaseGetFilter, upload, save, del, getItemID, getOne, getMany } = options\n\n  const resourcesStatus = {}\n  const resourcesReferences = {}\n  const resourcesData = {}\n  const resourcesPaths = {}\n  const resourcesUploadFields = {}\n\n  // Sanitize Resources\n  trackedResources.forEach((resource, index) => {\n    if (typeof resource === 'string') {\n      resource = {\n        name: resource,\n        path: resource,\n        uploadFields: []\n      }\n      trackedResources[index] = resource\n    }\n\n    const { name, path, uploadFields } = resource\n\n    if (!name) {\n      throw new Error(`name is missing from resource ${resource}`)\n    }\n\n    resourcesUploadFields[name] = uploadFields || []\n    resourcesPaths[name] = path || name\n    resourcesData[name] = {}\n  })\n\n  const initializeResource = ({name, isPublic}, resolve) => {\n    let ref = resourcesReferences[name] = firebase.database().ref(resourcesPaths[name])\n    resourcesData[name] = []\n\n    if (isPublic) {\n      subscribeResource(ref, name, resolve)\n    } else {\n      firebase.auth().onAuthStateChanged(auth => {\n        if (auth) {\n          subscribeResource(ref, name, resolve)\n        }\n      })\n    }\n\n    setTimeout(resolve, initialQuerytimeout)\n    return true\n  }\n\n  const subscribeResource = (ref, name, resolve) => {\n    ref.once('value', function (snapshot) {\n      /** Uses \"value\" to fetch initial data. Avoid the AOR to show no results */\n      if (snapshot.key === name) {\n        const entries = snapshot.val() || {}\n        Object.keys(entries).forEach(key => {\n          resourcesData[name][key] = firebaseGetFilter(entries[key], name)\n        })\n        Object.keys(resourcesData[name]).forEach(itemKey => {\n          resourcesData[name][itemKey].id = itemKey\n          resourcesData[name][itemKey].key = itemKey\n        })\n        resolve()\n      }\n    })\n\n    ref.on('child_added', function (snapshot) {\n      resourcesData[name][snapshot.key] = firebaseGetFilter(Object.assign({}, {\n        id: snapshot.key,\n        key: snapshot.key\n      }, snapshot.val()), name)\n    })\n\n    ref.on('child_removed', function (oldsnapshot) {\n      if (resourcesData[name][oldsnapshot.key]) { delete resourcesData[name][oldsnapshot.key] }\n    })\n\n    ref.on('child_changed', function (snapshot) {\n      resourcesData[name][snapshot.key] = snapshot.val()\n    })\n  }\n\n  trackedResources.forEach(resource => {\n    resourcesStatus[resource.name] = new Promise(resolve => {\n      initializeResource(resource, resolve)\n    })\n  })\n\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resourceName Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n  return async (type, resourceName, params) => {\n    debug && console.log(type, resourceName, params)\n    await resourcesStatus[resourceName]\n    let result = null\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY:\n      case GET_MANY_REFERENCE:\n        result = await getMany(params, resourceName, resourcesData[resourceName])\n        return result\n\n      case GET_ONE:\n        result = await getOne(params, resourceName, resourcesData[resourceName])\n        return result\n\n      case DELETE:\n        const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : []\n\n        result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields)\n        return result\n\n      case UPDATE:\n      case CREATE:\n\n        let itemId\n\n        const shouldCreateUser = admin && admin.path === resourceName && type === CREATE && params.data && params.data.email && params.data.password && admin.validate(params.data)\n        if (shouldCreateUser) {\n          try {\n            const app = firebase.initializeApp(admin.config, 'user-admin')\n            const user = await app.auth().createUserWithEmailAndPassword(params.data.email, params.data.password)\n            itemId = user.uid\n            app.auth().signOut()\n          } catch (error) {\n            return Promise.reject(new Error(error))\n          }\n        } else {\n          itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName])\n        }\n\n        const uploads = resourcesUploadFields[resourceName]\n          ? resourcesUploadFields[resourceName]\n            .map(field => upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName]))\n          : []\n\n        const currentData = resourcesData[resourceName][itemId] || {}\n        const uploadResults = await Promise.all(uploads)\n\n        result = await save(itemId, params.data, currentData, resourceName, resourcesPaths[resourceName], firebaseSaveFilter, uploadResults, type === CREATE, metaFieldNames)\n        return result\n\n      default:\n        debug && console.error('Undocumented method: ', type)\n        return { data: [] }\n    }\n  }\n}\n"],"names":["const","fieldName","submitedData","id","resourceName","resourcePath","file","Array","isArray","result","rawFile","name","firebase","storage","ref","child","put","then","snapshot","$await_4","uploadedAt","Date","now","src","downloadURL","split","shift","type","indexOf","e","console","error","Promise","resolve","img","document","createElement","onload","width","this","height","getImageSize","imageSize","$await_5","data","previous","firebaseSaveFilter","uploadResults","isNew","metaFieldNames","currentUser","auth","map","uploadResult","Object","assign","createdAt","createdBy","uid","updatedAt","key","database","update","uploadFields","length","delete","remove","params","resourceData","let","itemId","push","Error","CREATE","ids","total","forEach","pagination","values","filter","target","filterKeys","keys","value","filterIndex","property","JSON","stringify","sort","sortBy","order","i","_start","page","perPage","_end","slice","baseConfig","initialQuerytimeout","admin","path","config","validate","debug","trackedResources","firebaseGetFilter","options","deepAssign","methods","resourcesStatus","resourcesReferences","resourcesData","resourcesPaths","resourcesUploadFields","resource","index","subscribeResource","once","entries","val","itemKey","on","oldsnapshot","ref$1","isPublic","onAuthStateChanged","setTimeout","initializeResource","log","GET_LIST","GET_MANY","GET_MANY_REFERENCE","getMany","GET_ONE","getOne","$await_6","DELETE","del","$await_7","UPDATE","shouldCreateUser","email","password","getItemID","reject","app","initializeApp","createUserWithEmailAndPassword","$await_8","signOut","uploads","field","upload","currentData","all","$await_9","save","$await_10"],"mappings":"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"}