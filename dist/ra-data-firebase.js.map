{"version":3,"file":"ra-data-firebase.js","sources":["../src/methods.js","../src/data-provider.js"],"sourcesContent":["import firebase from 'firebase'\nimport sortBy from 'sort-by'\n\nimport {\n  CREATE\n} from 'react-admin'\n\nconst getImageSize = (file) => {\n  return new Promise(resolve => {\n    const img = document.createElement('img')\n    img.onload = function () {\n      resolve({\n        width: this.width,\n        height: this.height\n      })\n    }\n    img.src = file.src\n  })\n}\n\nconst upload = async (fieldName, submitedData, id, resourceName, resourcePath) => {\n  let file = submitedData[fieldName] && Array.isArray(submitedData[fieldName]) ? submitedData[fieldName][0] : submitedData[fieldName]\n  const result = {}\n  if (file && file.rawFile && file.rawFile.name) {\n    const rawFile = file.rawFile\n    const ref = firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`)\n    const snapshot = await ref.put(rawFile)\n    result[fieldName] = [{}]\n    result[fieldName][0].uploadedAt = Date.now()\n    result[fieldName][0].src = snapshot.downloadURL.split('?').shift() + '?alt=media'\n    result[fieldName][0].type = rawFile.type\n    if (rawFile.type.indexOf('image/') === 0) {\n      try {\n        const imageSize = await getImageSize(file)\n        result[fieldName][0].width = imageSize.width\n        result[fieldName][0].height = imageSize.height\n      } catch (e) {\n        console.error(`Failed to get image dimensions`)\n      }\n    }\n    return result\n  }\n  return false\n}\n\nconst save = async (id, data, previous, resourceName, resourcePath, firebaseSaveFilter, uploadResults, isNew, metaFieldNames) => {\n  const currentUser = firebase.auth().currentUser\n\n  if (uploadResults) {\n    uploadResults.map(uploadResult => uploadResult ? Object.assign(data, uploadResult) : false)\n  }\n\n  if (isNew) {\n    Object.assign(data, { [metaFieldNames.createdAt]: Date.now() })\n  }\n\n  if (currentUser) {\n    Object.assign(data, { [metaFieldNames.createdBy]: currentUser.uid })\n  }\n\n  data = Object.assign(previous, { [metaFieldNames.updatedAt]: Date.now() }, data)\n\n  if (!data.key) {\n    data.key = id\n  }\n  if (!data.id) {\n    data.id = id\n  }\n\n  await firebase.database().ref(`${resourcePath}/${data.key}`).update(firebaseSaveFilter(data))\n  return { data }\n}\n\nconst del = async (id, resourceName, resourcePath, uploadFields) => {\n  if (uploadFields.length) {\n    uploadFields.map(fieldName =>\n      firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`).delete())\n  }\n\n  await firebase.database().ref(`${resourcePath}/${id}`).remove()\n  return { data: id }\n}\n\nconst getItemID = (params, type, resourceName, resourcePath, resourceData) => {\n  let itemId = params.data.id || params.id || params.data.key || params.key\n  if (!itemId) {\n    itemId = firebase.database().ref().child(resourcePath).push().key\n  }\n\n  if (!itemId) {\n    throw new Error('ID is required')\n  }\n\n  if (resourceData && resourceData[itemId] && type === CREATE) {\n    throw new Error('ID already in use')\n  }\n\n  return itemId\n}\n\nconst getOne = (params, resourceName, resourceData) => {\n  if (params.id && resourceData[params.id]) {\n    return { data: resourceData[params.id] }\n  } else {\n    throw new Error('Key not found')\n  }\n}\n\nconst getMany = (params, resourceName, resourceData) => {\n  let ids = []\n  let data = []\n  let total = 0\n\n  if (params.ids && Array.isArray(params.ids)) {\n    /** GET_MANY */\n    params.ids.forEach(key => {\n      if (resourceData[key]) {\n        ids.push(key)\n        data.push(resourceData[key])\n        total++\n      }\n    })\n\n    return {total, ids, data}\n  } else if (params.pagination) {\n    /** GET_LIST / GET_MANY_REFERENCE */\n    let values = []\n\n    // Copy the filter params so we can modify for GET_MANY_REFERENCE support.\n    const filter = Object.assign({}, params.filter)\n\n    if (params.target && params.id) {\n      filter[params.target] = params.id\n    }\n\n    const filterKeys = Object.keys(filter)\n    /* TODO Must have a better way */\n    if (filterKeys.length) {\n      Object.values(resourceData).map(value => {\n        let filterIndex = 0\n        while (filterIndex < filterKeys.length) {\n          let property = filterKeys[filterIndex]\n          if (property !== 'q' && value[property] !== filter[property]) {\n            return filterIndex\n          } else if (property === 'q') {\n            if (JSON.stringify(value).indexOf(filter['q']) === -1) {\n              return filterIndex\n            }\n          }\n          filterIndex++\n        }\n        values.push(value)\n        return filterIndex\n      })\n    } else {\n      values = Object.values(resourceData)\n    }\n\n    if (params.sort) {\n      values.sort(sortBy(`${params.sort.order === 'ASC' ? '-' : ''}${params.sort.field}`))\n    }\n\n    const keys = values.map(i => i.id)\n    const { page, perPage } = params.pagination\n    const _start = (page - 1) * perPage\n    const _end = page * perPage\n    data = values.slice(_start, _end)\n    ids = keys.slice(_start, _end)\n    total = values.length\n    return { data, ids, total }\n  } else {\n    throw new Error('Error processing request')\n  }\n}\n\nexport default {\n  upload,\n  save,\n  del,\n  getItemID,\n  getOne,\n  getMany\n}\n","import firebase from 'firebase'\nimport methods from './methods'\nimport deepAssign from 'deep-assign'\n\nimport {\n  GET_LIST,\n  GET_ONE,\n  GET_MANY,\n  GET_MANY_REFERENCE,\n  CREATE,\n  UPDATE,\n  DELETE\n} from 'react-admin'\n\nconst baseConfig = {\n  initialQuerytimeout: 10000,\n  metaFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n    createdBy: 'createdBy'\n  },\n  admin: {\n    path: 'users',\n    config: {},\n    validate: () => true\n  },\n  debug: false,\n  trackedResources: [],\n  firebaseSaveFilter: (data) => data,\n  firebaseGetFilter: (data) => data\n}\n\nexport default (options = {}) => {\n  options = deepAssign({}, baseConfig, methods, options)\n  const { metaFieldNames, trackedResources, initialQuerytimeout, debug, admin, firebaseSaveFilter, firebaseGetFilter, upload, save, del, getItemID, getOne, getMany } = options\n\n  const resourcesStatus = {}\n  const resourcesReferences = {}\n  const resourcesData = {}\n  const resourcesPaths = {}\n  const resourcesUploadFields = {}\n\n  // Sanitize Resources\n  trackedResources.forEach((resource, index) => {\n    if (typeof resource === 'string') {\n      resource = {\n        name: resource,\n        path: resource,\n        uploadFields: []\n      }\n      trackedResources[index] = resource\n    }\n\n    const { name, path, uploadFields } = resource\n\n    if (!name) {\n      throw new Error(`name is missing from resource ${resource}`)\n    }\n\n    resourcesUploadFields[name] = uploadFields || []\n    resourcesPaths[name] = path || name\n    resourcesData[name] = {}\n  })\n\n  const initializeResource = ({name, isPublic}, resolve) => {\n    let ref = resourcesReferences[name] = firebase.database().ref(resourcesPaths[name])\n    resourcesData[name] = []\n\n    if (isPublic) {\n      subscribeResource(ref, name, resolve)\n    } else {\n      firebase.auth().onAuthStateChanged(auth => {\n        if (auth) {\n          subscribeResource(ref, name, resolve)\n        }\n      })\n    }\n\n    setTimeout(resolve, initialQuerytimeout)\n    return true\n  }\n\n  const subscribeResource = (ref, name, resolve) => {\n    ref.once('value', function (snapshot) {\n      /** Uses \"value\" to fetch initial data. Avoid the AOR to show no results */\n      if (snapshot.key === name) {\n        const entries = snapshot.val() || {}\n        Object.keys(entries).forEach(key => {\n          resourcesData[name][key] = firebaseGetFilter(entries[key], name)\n        })\n        Object.keys(resourcesData[name]).forEach(itemKey => {\n          resourcesData[name][itemKey].id = itemKey\n          resourcesData[name][itemKey].key = itemKey\n        })\n        resolve()\n      }\n    })\n\n    ref.on('child_added', function (snapshot) {\n      resourcesData[name][snapshot.key] = firebaseGetFilter(Object.assign({}, {\n        id: snapshot.key,\n        key: snapshot.key\n      }, snapshot.val()), name)\n    })\n\n    ref.on('child_removed', function (oldsnapshot) {\n      if (resourcesData[name][oldsnapshot.key]) { delete resourcesData[name][oldsnapshot.key] }\n    })\n\n    ref.on('child_changed', function (snapshot) {\n      resourcesData[name][snapshot.key] = snapshot.val()\n    })\n  }\n\n  trackedResources.forEach(resource => {\n    resourcesStatus[resource.name] = new Promise(resolve => {\n      initializeResource(resource, resolve)\n    })\n  })\n\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resourceName Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n  return async (type, resourceName, params) => {\n    debug && console.log(type, resourceName, params)\n    await resourcesStatus[resourceName]\n    let result = null\n    let itemId = null\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY:\n      case GET_MANY_REFERENCE:\n        result = getMany(params, resourceName, resourcesData[resourceName])\n        return result\n\n      case GET_ONE:\n        result = getOne(params, resourceName, resourcesData[resourceName])\n        return result\n\n      case DELETE:\n        var uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : []\n\n        result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields)\n        return result\n\n      case UPDATE:\n      case CREATE:\n        if (admin && admin.path === resourceName && type === CREATE && params.data && params.data.email && params.data.password && admin.validate(params.data)) {\n          try {\n            let app = firebase.initializeApp(admin.config, 'user-admin')\n            let user = await app.auth().createUserWithEmailAndPassword(params.data.email, params.data.password)\n            itemId = user.uid\n            app.auth().signOut()\n          } catch (error) {\n            return Promise.reject(new Error(error))\n          }\n        } else {\n          itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName])\n        }\n\n        var uploads = resourcesUploadFields[resourceName]\n          ? resourcesUploadFields[resourceName]\n            .map(field => upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName]))\n          : []\n\n        var currentData = resourcesData[resourceName][itemId] || {}\n        var uploadResults = await Promise.all(uploads)\n\n        result = await save(itemId, params.data, currentData, resourceName, resourcesPaths[resourceName], firebaseSaveFilter, uploadResults, type === CREATE, metaFieldNames)\n        return result\n\n      default:\n        debug && console.error('Undocumented method: ', type)\n        return { data: [] }\n    }\n  }\n}\n"],"names":["const","let","CREATE","GET_LIST","GET_MANY","GET_MANY_REFERENCE","GET_ONE","DELETE","UPDATE"],"mappings":"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"}